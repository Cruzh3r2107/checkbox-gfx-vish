#!/bin/bash

set -e

INSTALL_DIR=/usr/local/checkbox-gfx
WORKING_DIR=$HOME/.checkbox-gfx-working-dir

# Get vendor
if [[ $(lscpu | grep "GenuineIntel") ]]; then
    VENDOR=Intel
elif [[ $(lscpu | grep "AuthenticAMD") ]]; then
    VENDOR=AMD
elif [[ $(lscpu | grep "Qualcomm") ]]; then
    VENDOR=Qualcomm
fi

sudo mkdir $INSTALL_DIR
sudo mkdir -p $WORKING_DIR
sudo chown -R $USER $WORKING_DIR

sudo apt update -y

# install OpenCL-CTS
sudo apt install -y ocl-icd-opencl-dev clinfo
cd $WORKING_DIR
git clone https://github.com/KhronosGroup/OpenCL-CTS
cd OpenCL-CTS
git checkout v2024-05-29-01
mkdir build
cd ..
cmake -S OpenCL-CTS -B OpenCL-CTS/build  -DCL_INCLUDE_DIR=/usr/include/CL -DCL_LIB_DIR=/usr/lib/x86_64-linux-gnu/  -DOPENCL_LIBRARIES=OpenCL
cmake --build OpenCL-CTS/build --config Release
sudo mv $WORKING_DIR/OpenCL-CTS $INSTALL_DIR/OpenCL-CTS

if [ "$VENDOR" = "Intel" ]; then
    echo "Installing Level Zero tests"
    # install level-zero testing

    sudo apt -y update
    sudo apt install -y build-essential cmake ocl-icd-libopencl1 libva2 libva-drm2 libze-dev libze-intel-gpu-dev libpng-dev libboost-all-dev libmfx-gen1 ninja-build clang

    cd $WORKING_DIR
    git clone https://github.com/oneapi-src/level-zero-tests
    cd level-zero-tests
    git checkout 5477490d98ad737a79ce8017954d1c3b1301e88c
    mkdir build
    cd build
    cmake -D CMAKE_INSTALL_PREFIX=$INSTALL_DIR ..
    sudo cmake --build . --config Release --target install
    sudo mv $WORKING_DIR/level-zero-tests $INSTALL_DIR/level-zero-tests

    echo "Installing Level Zero Raytracing tests"
    # install level-zero-raytracing-support testing
    cd $WORKING_DIR
    mkdir sycl_linux && cd sycl_linux
    wget https://github.com/intel/llvm/releases/download/nightly-2024-06-10/sycl_linux.tar.gz
    tar xf sycl_linux.tar.gz
    sudo mv $WORKING_DIR/sycl_linux $INSTALL_DIR/sycl_linux

    cd $INSTALL_DIR/sycl_linux
    # Set up the expected paths
    export SYCL_BUNDLE_ROOT=$(pwd)
    export PATH=$SYCL_BUNDLE_ROOT/bin:$PATH
    export CPATH=$SYCL_BUNDLE_ROOT/include:$CPATH
    export LIBRARY_PATH=$SYCL_BUNDLE_ROOT/lib:$LIBRARY_PATH
    export LD_LIBRARY_PATH=$SYCL_BUNDLE_ROOT/lib:$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH=$SYCL_BUNDLE_ROOT/linux/lib/x64:$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH=$SYCL_BUNDLE_ROOT/lib/oclgpu:$LD_LIBRARY_PATH

    cd $WORKING_DIR
    git clone https://github.com/intel/level-zero-raytracing-support
    cd level-zero-raytracing-support
    mkdir build
    cd build/
    cmake -G Ninja -D CMAKE_CXX_COMPILER=clang++ -D CMAKE_C_COMPILER=clang -D CMAKE_BUILD_TYPE=Release -D ZE_RAYTRACING_SYCL_TESTS=DEFAULT_RTAS_BUILDER ..
    cmake --build . --target package && echo "Level zero raytracing build complete" || exit 1
    sudo mv $WORKING_DIR/level-zero-raytracing-support $INSTALL_DIR
else
    echo "Not installing Level Zero testing because it is Intel-specific"
fi

echo "Installing Crucible tests"
# install crucible
sudo apt install -y python3-pip meson glslang-tools pkg-config cmake libvulkan-dev libgl1 mesa-common-dev libglfw3-dev libgles2-mesa-dev
pip3 install opencv-python lxml --break-system-packages

cd $WORKING_DIR
git clone https://gitlab.freedesktop.org/mesa/crucible
cd crucible
meson bin
ninja -C bin
cd ..
sudo mv $WORKING_DIR/crucible $INSTALL_DIR

echo "Installing VK-GL-CTS for Vulkan"
cd $WORKING_DIR
git clone https://github.com/KhronosGroup/VK-GL-CTS
cd VK-GL-CTS
git checkout vulkan-cts-1.4.1.3
python3 external/fetch_sources.py
mkdir build && cd build
cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS=-m64 -DCMAKE_CXX_FLAGS=-m64
# 64GB RAM wasn't enough for -j. Add nproc
make -j`nproc`
sudo mv $WORKING_DIR/VK-GL-CTS $INSTALL_DIR

echo "Installing VK-GL-CTS for OpenGL"
cd $WORKING_DIR
git clone https://github.com/KhronosGroup/VK-GL-CTS
cd VK-GL-CTS
git checkout opengl-cts-4.6.6.0
python3 external/fetch_sources.py
python3 -m pip install lxml
mkdir build && cd build
cmake .. -DDEQP_TARGET=default
# 64GB RAM wasn't enough for -j. Add nproc
make -j`nproc`
sudo mv $WORKING_DIR/VK-GL-CTS $INSTALL_DIR/GL-CTS
